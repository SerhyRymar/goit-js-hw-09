{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,S,aA8BmFC,GAGjE,IAAIC,SAAQ,CAACC,EAASC,KACpC,MAAMC,EAASC,KAAKD,SAAW,GAE/BE,YAAW,KACLF,EACFF,EAAQ,CAAEK,SAAAC,EAAUC,MAAAT,IAEpBG,EAAO,CAAEI,SAAAC,EAAUC,MAAAT,GAAQ,GAE5BA,EAAM,IAIRU,MAAK,EAACH,SAAEA,EAAQE,MAAEA,MACjBE,EAAAb,GAASc,OAAOC,QAAQ,uBAAqBN,QAAiBE,MAAU,IAEzEK,OAAM,EAACP,SAAEA,EAAQE,MAAEA,MAClBE,EAAAb,GAASc,OAAOG,QAAQ,sBAAoBR,QAAeE,MAAU,G,EA9C9D,CACXO,KAAMC,SAASC,cAAc,WAG1BF,KAAKG,iBAAiB,U,YAQzBC,EAAEC,iBAEF,IAAIC,EAAYF,EAAEG,cAAcd,MAAMe,cACtC,MAAMC,EAAYL,EAAEG,cAAcG,KAAKF,cACjCG,EAAkBP,EAAEG,cAAcK,OAAOJ,cAE/C,IAAK,IAAIjB,EAAW,EAAGA,GAAYoB,EAAiBpB,GAAY,EAC9DsB,EAActB,EAAUe,GACxBA,GAAaG,C","sources":["src/js/03-promises.js"],"sourcesContent":["// 1. Підключаємо бібліотеку \nimport Notiflix from 'notiflix';\n\n\n// 2. Знаходимо посилання \nconst refs = {\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\n\n/*3. Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) \nстільки разів, скільки ввели в поле amount.Під час кожного виклику передай їй номер промісу(position),\nщо створюється, і затримку, враховуючи першу затримку(delay), введену користувачем, і крок(step).*/\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n\n  let mainDelay = e.currentTarget.delay.valueAsNumber;\n  const delayStep = e.currentTarget.step.valueAsNumber;\n  const amountOfPromise = e.currentTarget.amount.valueAsNumber;\n\n  for (let position = 1; position <= amountOfPromise; position += 1) {\n    createPromise(position, mainDelay);\n    mainDelay += delayStep;\n  }\n}\n\n/*4. Доповни код функції createPromise таким чином, щоб вона повертала один проміс,\nякий виконується або відхиляється через delay часу.Значенням промісу повинен бути об'єкт,\nв якому будуть властивості position і delay зі значеннями однойменних параметрів.*/\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    const random = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (random) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n\n  promise\n    .then(({ position, delay }) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n}\n"],"names":["$eWCmQ","parcelRequire","delay1","Promise","resolve","reject","random","Math","setTimeout","position","position1","delay","then","$parcel$interopDefault","Notify","success","catch","failure","form","document","querySelector","addEventListener","e","preventDefault","mainDelay","currentTarget","valueAsNumber","delayStep","step","amountOfPromise","amount","$47d4ff9957288465$var$createPromise"],"version":3,"file":"03-promises.9f9fe240.js.map"}